(set newline "\n")
(def print  // Helper to print 'a'
    (out "a: " a newline)
)

(out "b: " "1" "\n")

////// simple array declaration //////
(out newline)

(set a (1 2)) (print)

// This results in nested arrays
(set a (3 (1 2))) (print)
(set a ((1 2) 3)) (print)

// Add arrays to make longer ones
(set a (+ (1 2) (3 4))) (print)

// A trick to make length-1 arrays
(set a (- (0 1) (1 1))) (print)

// Similarly, empty arrays
(set a (- (1 1) (1 1))) (print)

////// array literal //////
(out newline)

// Arrays are declared in square braces, delimited with spaces
(set a [1 2 3 4 5 6 7]) (print)

(set a []) (print)
(set a [1]) (print)

////// mixed input //////
(out newline)

// Arrays can have ints, floats or strings
(set a [1 "hello" "farewell" 3.3]) (print)

////// range keyword //////
(out newline)

// This: ...
(set a (range 1 5))
(print)
// Expands into this:
(set a
    (+ (1 2) // Array [1,2]
        (+ (3 4) // Array [3,4]
            (- (5 1) (1 1)) // Array [5]
        )
    )
)
(print)

// Ranges with variable step are also supported
(set a (range 0 10 1)) (print)
(set a (range 0 10 2)) (print)
(set a (range 0 10 3)) (print)

////// star (*) operator //////
(out newline)

(set a [1 2 3 4])

// * overloads concatenation
(out (* a 3) newline)

// as well as .join with string
(out (* a ",") newline)
(out (* a " -> ") newline)

(set a ("one" "two"))
(out (* a " -> ") newline)

// String concatenation
(set a "Quick") (set b "ly")
(out (* (a b) "") newline)
(out (+ a b) newline) // But this is simpler

////// Add to array //////
(out newline)

(set a [1 2 3 4])
(set a (+ a [5])) (print) // Append
(set a (+ [0] a)) (print) // Prepend

////// Array elements //////
(out newline)

// Arrays are zero-indexed
(set a [1 2 3 4]) (print)
(out "a[0]: " (arg a 0) newline)
(out "a[1]: " (arg a 1) newline)

// Negative indices go from the end
(out "a[-1]: " (arg a -1) newline)
(out "a[-2]: " (arg a -2) newline)

// Too large indices give 'nil'
(out "a[4]: " (arg a 4) newline)
(out "a[-5]: " (arg a -5) newline)
